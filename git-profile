#!/bin/bash -e

readonly EXECUTABLE="$(basename "$0")"

function main() {
    local subcmd="list"

    if [ $# -ne 0 ]; then
        subcmd="$1"
        shift
    fi

    case "$subcmd" in
        init)
            cmd_init "$@"
            ;;
        list)
            cmd_list "$@"
            ;;
        add)
            cmd_add "$@"
            ;;
        current)
            cmd_current "$@"
            ;;
        config)
            cmd_config "$@"
            ;;
        help)
            cmd_help
            ;;
        *)
            raise_error "'$subcmd' is not a git profile subcommand. See git profile help"
            ;;
    esac
}

function echo_err() {
    echo "$@" >&2
}

function raise_error() {
    local message="$1"

    echo_err "$EXECUTABLE: $message"
    exit 1
}

function cmd_init() {
    while [ $# -ne 0 ]; do
        case "$1" in
            --help)
                cmd_help "init"
                exit 128
                ;;
            *)
                raise_error "Unexpected argument $1"
                ;;
        esac
        shift
    done

    ensure_git_profile_directory
    ensure_git_profile_config
    ensure_include_path

    echo "Initialized profile configuration at ~/.git-profile/"
}

function ensure_git_profile_directory() {
    if ! { [ -d ~/.git-profile ] || [ -L ~/.git-profile ] ; }; then
        mkdir ~/.git-profile
    fi
}

function ensure_git_profile_config() {
    # test for both regular files and symbolic links
    if ! { [ -f ~/.git-profile/.config ] || [ -L ~/.git-profile/.config ] ; }; then
        touch ~/.git-profile/.config
        # shellcheck disable=SC2088
        git config --file ~/.git-profile/.config include.path "~/.git-profile/default"
    fi
}

function ensure_include_path() {
    local initialized=0

    while IFS= read -r -d $'\0' include_path; do
        # shellcheck disable=SC2088
        if [ "$include_path" = "~/.git-profile/.config" ]; then
            initialized=1
            break
        fi
    done < <(git config --global --get-all --null include.path)

    if [ $initialized -eq 0 ]; then
        # shellcheck disable=SC2088
        git config --global --no-includes --add include.path "~/.git-profile/.config"
    fi
}

function cmd_list() {
    while [ $# -ne 0 ]; do
        case "$1" in
            --help)
                cmd_help "list"
                exit 128
                ;;
            *)
                raise_error "Unexpected argument $1"
                ;;
        esac
        shift
    done

    if [ -d ~/.git-profile ]; then
        ls -1 ~/.git-profile
    else
        raise_error "Run git profile has not been initialized. Run 'git profile init'"
    fi
}

function cmd_add() {
    local profile_name=""
    local user_name=""
    local user_email=""
    local user_prompt_required=1

    while [ $# -ne 0 ]; do
        case "$1" in
            --help)
                cmd_help "add"
                exit 128
                ;;
            --user|-u)
                if [ -z "$2" ]; then
                    raise_error "Expected user"
                fi
                case "$2" in
                    *" <"*">")
                        # Display Name <email@address>
                        user_name="${2% <*}"
                        user_email="${2#"$user_name <"}"
                        user_email="${user_email%>}"
                        ;;
                    *"@"*)
                        # email@address
                        user_email="$2"
                        ;;
                    *)
                        # Display Name
                        user_name="$2"
                        ;;
                esac
                user_prompt_required=0
                shift
                ;;
            *)
                if [ -z "$profile_name" ]; then
                    profile_name="$1"
                else
                    raise_error "Unexpected argument $1"
                fi
                ;;
        esac
        shift
    done

    if [ -z "$profile_name" ]; then
        raise_error "Expected <profile>"
    fi

    if [ -f ~/.git-profile/"$profile_name" ]; then
        raise_error "Profile '$profile_name' already exists"
    fi

    if [ $user_prompt_required -eq 1 ]; then
        read -r -p 'User name: ' user_name
        read -r -p 'User email: ' user_email
    fi

    touch ~/.git-profile/"$profile_name"
    git config --file ~/.git-profile/"$profile_name" profile.name "$profile_name"

    if [ -n "$user_name" ]; then
        git config --file ~/.git-profile/"$profile_name" user.name "$user_name"
    fi

    if [ -n "$user_email" ]; then
        git config --file ~/.git-profile/"$profile_name" user.email "$user_email"
    fi

    echo "Created profile '$profile_name'" 
}

function cmd_current() {
    local new_profile_name=""
    local is_set=0
    # 0 = repository, 1 = directory, 2 = global
    local set_mode=0
    while [ $# -ne 0 ]; do
        case "$1" in
            --help)
                cmd_help "current"
                exit 128
                ;;
            --local|-l)
                is_set=1
                set_mode=0
                ;;
            --subdirectory|-s)
                is_set=1
                set_mode=1
                ;;
            --global|-g)
                is_set=1
                set_mode=2
                ;;
            *)
                if [ -z "$new_profile_name" ]; then
                    new_profile_name="$1"
                    is_set=1
                else
                    raise_error "Unexpected argument $1"
                fi
                ;;
        esac
        shift
    done

    if [ $is_set -eq 1 ]; then
        if [ $set_mode -eq 1 ]; then
            set_current_profile_in_directory "$new_profile_name"
        elif [ $set_mode -eq 2 ]; then
            set_current_profile_default "$new_profile_name"
        else
            set_current_profile_in_repository "$new_profile_name"
        fi
    else
        get_current_profile
    fi
}

function get_current_profile() {
    git config --get profile.name
}

function set_current_profile_in_repository() {
    local new_profile_name="$1"
    validate_profile "$new_profile_name"

    # shellcheck disable=SC2088
    git config --local include.path "~/.git-profile/$new_profile_name"
}

function set_current_profile_in_directory() {
    local new_profile_name="$1"
    validate_profile "$new_profile_name"

    local current_dir="$PWD/"
    if [ "${current_dir#"$HOME"}" != "$current_dir" ]; then
        current_dir="~${current_dir#"$HOME"}"
    fi
   
    # shellcheck disable=SC2088
    git config --file  ~/.git-profile/.config includeIf."gitdir/i:$current_dir".path "~/.git-profile/$new_profile_name" "~/\.git-profile/[^/]+"
}

function set_current_profile_default() {
    local new_profile_name="$1"
    validate_profile "$new_profile_name"

    # shellcheck disable=SC2088
    git config --file  ~/.git-profile/.config include.path "~/.git-profile/$new_profile_name" "~/\.git-profile/[^/]+"
}

function validate_profile() {
    local profile_name="$1"

    if [ -z "$profile_name" ]; then
        raise_eror "Expected profile"
    fi
    if ! git config --file ~/.git-profile/"$profile_name" --get profile.name "$profile_name" > /dev/null; then
        raise_error "Invalid profile $profile_name"
    fi
}

function cmd_config() {
    for argument in "$@"; do
        case "$argument" in
            --help)
                cmd_help "config"
                exit 128
                ;;
        esac
    done
    local profile_name="$1"
    shift
    validate_profile "$profile_name"

    for argument in "$@"; do
        case "$argument" in
            --file|--local|--global|--system|--worktree)
                raise_error "Invalid argument $argument"
                ;;
            *)
                ;;
        esac
    done

    git config --file ~/.git-profile/"$profile_name" "$@"
}

function cmd_help() {
    local subcmd="$1"
    case "$subcmd" in
        list)
            echo -e "usage: git profile list [<options>]"
            echo
            echo -e "List the profiles currently available"
            echo
            echo -e "Options"
            echo -e "\t--help\tDisplay this help message"
            echo
            ;;
        init)
            echo -e "usage: git profile init [<options>]"
            echo
            echo -e "Initialize the configuration for git-profile"
            echo
            echo -e "Options"
            echo -e "\t--help\tDisplay this help message"
            echo
            ;;
        add)
            echo -e "usage: git profile add [<otions>] <name>"
            echo
            echo -e "Add a new profile with the given name"
            echo
            echo -e "Options"
            echo -e "\t-u, --user <user>\tSet the user name for the new profile."
            echo -e "\t                 \tIf not specified, an interactive prompt will be used"
            echo -e "\t--help           \tDisplay this help message"
            echo
            ;;
        current)
            echo -e "usage: git profile current [<options>] [<name>]"
            echo
            echo -e "Set the profile for the repository/subdirectory/default. If no profile name is given, return the current effective profile for repository"
            echo
            echo -e "Options"
            echo -e "\t-l, --local       \tSet the profile for the repository in the current working directory. This is the default"
            echo -e "\t-s, --subdirectory\tSet the profile for all subdirectories of the current working directory"
            echo -e "\t-g, --global      \tSet the default profile"
            echo -e "\t--help\tDisplay this help message"
            echo
            ;;
        config)
            echo -e "usage: git profile config <name> ..."
            echo
            echo -e "Get or set configuration for the specified profile. See git config help for more details"
            echo
            echo -e "Options"
            echo -e "\t--help\tDisplay this help message"
            echo
            ;;
        *)
            echo -e "usage: git profile [list]"
            echo -e "   or: git profile init"
            echo -e "   or: git profile add [ -u <user> | --user <user> ] <name>"
            echo -e "   or: git profile current [ -s | --subdirectory | -d | --default ] [<name>]"
            echo -e "   or: git profile config <name> ..."
            echo -e "   or: git profile help"
            echo
            ;;
    esac
}

main "$@"
